openapi: 3.0.0
info:
  description: Example X-road service
  version: 1.0.0
  title: Population database
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
paths:
  /persons:
    get:
      description: Search persons
      operationId: list_persons
      parameters:
        - name: givenname
          in: query
          description: Given Name
          required: false
          schema:
            type: string
        - name: surname
          in: query
          description: Surname
          required: false
          schema:
            type: string
        - name: personcode
          in: query
          description: Person code
          required: false
          schema:
            type: string
        - name: max_results
          in: query
          description: Max number of results
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/ListPerson'
        '400':
          description: bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: error message          
        '404':
          description: person not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: error message          

  /person/{code}:
    get:
      description: Get person's data
      operationId: get_persons
      parameters:
        - name: code
          in: path
          description: Person code
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
        '400':
          description: bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: error message          
        '404':
          description: person not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: error message          

  /person/{code}/photo:
    put:
      description: Upload new photo
      operationId: put_photo
      parameters:
        - name: code
          in: path
          description: person code
          required: true
          schema:
            type: string
        - name: photo
          in: query
          description: photo file (base64-encoded)
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: error message          
        '404':
          description: person not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: error message          
components:
  schemas:
    ListPerson:
      type: object
      properties:
        personcode:
          type: string
          description: Person code
        givenname:
          type: string
          description: Given name
        surname:
          type: string
          description: Surname
    Person:
      type: object
      properties:
        personcode:
          type: string
          description: Person code
        givenname:
          type: string
          description: Given name
        surname:
          type: string
          description: Surname
        full_address:
          type: string
          description: Address
        docno:
          type: string
          description: Doc number
        status:
          type: string
          description: Status
          enum:
            - E
            - S
            - M
            - P
        photo:
          type: string
          description: Photo (base64-encoded)
